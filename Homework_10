Домашнее задание к занятию "Объектно-ориентированное программирование и проектирование"
Инструкция к выполнению домашнего задания
Перед тем, как отправить своё решение на проверку преподавателю, сверьтесь с чеклистом

1. В решении выполнены все требования задания
2. Правильно настроен Maven-проект, тесты проходят
3. Что делать, если возникли сложности?
4. Отформатирован код
5. Настроен Github CI с verify-сборкой Maven
Шаблон вашего maven.yml должен выглядеть вот так, убедитесь что всё совпадает с вашим шаблоном (например, что вы указали фазу verify, а не package):

name: Java CI with Maven

on: [push, pull_request]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
    - name: Build with Maven
      run: mvn -B -e verify

и JaCoCo в режиме генерации отчётов с покрытием на 100% по бранчам методов с логикой

JaCoCo
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>0.8.5</version>
                ...
Инициализация:

                    <execution>
                        <id>prepare-agent</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
В режиме генерации отчётов:

                    <execution>
                        <id>report</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                    </execution>
В режиме проверки и обрушения сборки по уровню покрытия:

                    <execution>
                        <id>check</id>
                        <goals>
                            <goal>check</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <rule>
                                    <limits>
                                        <limit>
                                            <counter>LINE</counter>
                                            <value>COVEREDRATIO</value>
                                            <minimum>100%</minimum>
                                        </limit>
                                    </limits>
                                </rule>
                            </rules>
                        </configuration>
                    </execution>

Задание 1. Радиоман (обязательное к выполнению)
В рамках проекта по созданию "Умного дома" у нас появился очень важный клиент, которых хочет кастомную доработку: он очень любит радио, поэтому нам нужно научиться управлять радио.

Что нужно сделать: по аналогии с кондиционером создайте класс Radio, в котором храните следующие поля (т.е. данные, которые будут помнить о себе объекты радио):

Номер текущей (прослушиваемой) радиостанции
Громкость звука
Требования к работе с радиостанциями:

Номер текущей радиостанции может принимать значения только в пределах от 0 до 9
Если текущая радиостанция - 9 и клиент нажал на кнопку next (=вызвал одноимённый метод next, с англ. следующая) на пульте, то текущей должна стать 0-ая; в остальных случаях при нажатии на эту же кнопку радио переключается просто на следующую станцию.
Если текущая радиостанция - 0 и клиент нажал на кнопку prev (=вызвал одноимённый метод prev, с англ. предыдущая) на пульте, то текущей должна стать 9-ая; в остальных случаях радиопереключается просто на предыдущую станцию.
Клиент должен иметь возможность выставлять номер радиостанции через прямое указание её номера (для этого подойдёт один метод-сеттер с проверкой на допустимость номера станции)
Требования к работе с уровнем громкости звука:

Клиент должен иметь возможность увеличивать и уменьшать уровень громкости звука (в пределах от 0 до 10)
Если уровень громкости звука достиг максимального значения, то дальнейшее нажатие на + (=вызов метода увеличения громкости на один, придумайте название сами) не должно ни к чему приводить
Если уровень громкости звука достиг минимального значения, то дальнейшее нажатие на - (=вызов метода уменьшения громкости на один, придумайте название сами) не должно ни к чему приводить
Пример реализации метода увеличения звука на 1 (остальные методы переключения на 1 текущей станции или звука сделайте самостоятельно по аналогии):

public class Radio {
  ...

  public void increaseVolume() {
    if (currentVolume < 10) {
      currentVolume = currentVolume + 1;
    }
  }
}
К созданному классу Radio напишите тесты, добейтесь покрытия на 100% по бранчам, обрушать сборку по покрытию при этом не нужно. Для хорошего тестирования рекомендуем вам провести тест-дизайн перед написанием тестов, так вы с большей вероятностью найдёте дефекты в вашем коде.

Результат
При отправке решения в личном кабинете прикрепите ссылку на ваш публичный гитхаб-репозиторий.